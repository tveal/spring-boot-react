plugins {
    id 'java'
    id 'eclipse-wtp'
    id 'org.springframework.boot' version '2.0.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'war'
    id "com.bmuschko.cargo" version "2.3"
}

project.webAppDirName = 'ui/build'

ext {
    cargoConfig = [ debugPort : 5018, portNumber : 8090 ]
}

task wrapper(type: Wrapper) {
    gradleVersion = 4.5
}

repositories {
    jcenter()
}

dependencies {
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    providedRuntime 'javax.el:javax.el-api:3.0.0'

    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude(module: 'hibernate-validator')
    }
    compile 'org.slf4j:slf4j-api:1.7.25'

    testCompile 'org.slf4j:slf4j-log4j12:1.7.25'
    testCompile 'junit:junit:4.12'
}

bootRun {
    doFirst {
        systemProperty "server.servlet.contextPath", "/$project.name"
    }
}

bootWar.dependsOn ':ui:build'
bootWar.mustRunAfter ':ui:build'

//// BEGIN: cargo config:
def getAvailablePort() {
    return new ServerSocket(0).getLocalPort()
}

def cargoHome = "$buildDir/cargo"
def jmxPort = getAvailablePort()
def servletPort = project.cargoConfig.portNumber ?: getAvailablePort()

def environment = project.hasProperty('env') ? project.getProperty('env') : 'local'
environment = environment.contains('_') || environment == 'local' ? environment : "${environment}_dist1"

cargo {
    containerId = 'tomcat7x'

    deployable {
        file = file("$buildDir/$libsDirName/${project.name}.war")
        context = project.name
    }

    local {
        homeDir = file(cargoHome)
        configHomeDir = file(cargoHome)
        outputFile = file('build/output.log')
        timeout = 60000

        containerProperties {
            property 'cargo.tomcat.ajp.port', getAvailablePort()
            property 'cargo.rmi.port', getAvailablePort()
            property 'cargo.servlet.port', servletPort
        }

        systemProperties {
            property 'com.sun.management.jmxremote.port', jmxPort
            property 'com.sun.management.jmxremote.ssl', false
            property 'com.sun.management.jmxremote.authenticate', false
        }

        installer {
            installUrl = 'https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.81/bin/apache-tomcat-7.0.81.zip'
            downloadDir = file("$buildDir/download")
            extractDir = file("$buildDir/extract")
        }
    }
}

task createCargoHome() {
    doLast {
        if (!file(cargoHome).exists() && !file(cargoHome).mkdirs()) {
            println "Failed to create directory '${cargoHome}'"
        }
    }
}

cargoStartLocal.dependsOn createCargoHome
cargoRunLocal.dependsOn createCargoHome
cargoRunLocal.dependsOn assemble
//// BEGIN: cargo config:
